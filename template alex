module ASM (input clk,
    input rst,
    input clr,
    input ent,
    input change,
	output reg [5:0] led,
	output reg [22:0] disps,
    input [3:0] sw); 


//registers

 reg [15:0] password; 
 reg [15:0] inpassword;
 reg [5:0] current_state;
 reg [5:0] next_state;	

// parameters for States, you will need more states obviously
parameter IDLE = 6'b000000; //idle state 
parameter GETFIRSTDIGIT = 6'b000001; // get_first_input_state // this is not a must, one can use counter instead of having another step, design choice
parameter GETSECONDIGIT = 6'b000010; //get_second input state
// parameters for output, you will need more obviously

parameter one = 5'd1; //1
parameter two = 5'd2; //2
parameter three = 5'd3; //3
parameter dash = 5'd16;//Display Dashes
parameter blank = 5'd17; //Display "blanks"
parameter O = 5'd18; //O			
parameter P = 5'd19; //P	
parameter E = 5'd20; //E	
parameter n = 5'd21; //n	
parameter C = 5'd22; //C
parameter L = 5'd23; //L
parameter S = 5'd24; //S
parameter d = 5'd25; //d
parameter u = 5'd26; //u
parameter r = 5'd27; //r
parameter t = 5'd28; //t
parameter y = 5'd29; //y

//Sequential part for state transitions
	always @ (posedge clk or posedge rst)
	begin
		// your code goes here
		if(rst==1)
		current_state<= IDLE;
		else
		current_state<= next_state;
		
	end



	// combinational part - next state definitions
	always @ (*)
	begin
		if(current_state == IDLE)
		begin
			//assign password[15:0]=16'b0000000000000000;
			// your code goes here
			if(ent == 1)
				next_state = GETFIRSTDIGIT;
			else 
				next_state = current_state;
			
		end

		else if ( current_state == GETFIRSTDIGIT )
			 if (ent == 1)
			 	next_state = GETSECONDIGIT;
			 else
			 	next_state = current_state;
		/*
		you have to complete the rest, in this combinational part, DO NOT ASSIGN VALUES TO OUTPUTS DO NOT ASSIGN VALUES TO REGISTERS
		just determine the next_state, that is all. password = 0000 -> this should not be there for instance or LED = 1010 this should not be there as well

		else if 

		else if



		*/
		else
			next_state = current_state;

	end



	 //Sequential part for control registers, this part is responsible from assigning control registers or stored values
	always @ (posedge clk or posedge rst)
	begin
		if(rst)
		begin
			inpassword[15:0]<=0; // password which is taken coming from user, 
			password[15:0]<=0;
		end

		else 
			if(current_state == IDLE)
			begin
			 	password[15:0] <= 16'b0000000000000000; // Built in reset is 0, when user in IDLE state.
				 // you may need to add extra things here.
			end
		
			else if(current_state == GETFIRSTDIGIT)
			begin
				if(ent==1)
					inpassword[15:12]<=sw[3:0]; // inpassword is the password entered by user, first 4 digin will be equal to current switch values
			end

			else if (current_state == GETSECONDIGIT)
			begin

				if(ent==1)
					inpassword[11:8]<=sw[3:0]; // inpassword is the password entered by user, second 4 digit will be equal to current switch values
				
			end


		/*

		Complete the rest of ASM chart, in this section, you are supposed to set the values for control registers, stored registers(password for instance)
		number of trials, counter values etc... 

		*/

	end


	// Sequential part for outputs; this part is responsible from outputs; i.e. SSD and LEDS
	
blinking blink(disps,clk,seven_out,AN);

	always @(posedge clk)
	begin

		if(current_state == IDLE)
		begin
		disps <= {C, L, S, D};	//CLSD
		end

		else if(current_state == GETFIRSTDIGIT)
		begin
		disps <= {100,0,sw[3:0],blank, blank, blank};
		//disps[22:20] <= 3'b100;	// you should modify this part slightly to blink it with 1Hz. The 0 is at the beginning is to complete 4bit SW values to 5 bit.
		//disps[19:0] <= 20'b10001100011000110001;
		//disps[18:15] <= sw[3:0];
		//disps[19] <= 1'b0;
		end

		else if(current_state == GETSECONDIGIT)
		begin
		disps <= {101,dash,0,sw[3:0],blank,blank};
		//disps[22:20] <= 3'b101;	// you should modify this part slightly to blink it with 1Hz. 0 after tire is to complete 4 bit sw to 5 bit. Padding 4 bit sw with 0 in other words.	
		//disps[19:0] <= 20'b10001100011000110001;
		//disps[19:15] <= 5'b10000;
		//disps[13:10] <= sw[3:0];
		//disps[14] <= 1'b0;
		end
		
		else if(current_state == GETTHIRDDIGIT)
		begin
		disps <= {110,dash,dash,0,sw[3:0],blank};
		//disps[22:20] <= 3'b110;	// you should modify this part slightly to blink it with 1Hz. 0 after tire is to complete 4 bit sw to 5 bit. Padding 4 bit sw with 0 in other words.	
		//disps[19:0] <= 20'b10001100011000110001;
		//disps[19:10] <= 10'b1000010000;
		//disps[8:5] <= sw[3:0];
		//disps[9] <= 1'b0;
		end
		
		else if(current_state == GETFOURTHDIGIT)
		begin
		disps <= {111,dash,dash,dash,0,sw[3:0]};
		//disps[22:20] <= 3'b111;	// you should modify this part slightly to blink it with 1Hz. 0 after tire is to complete 4 bit sw to 5 bit. Padding 4 bit sw with 0 in other words.	
		//disps[19:0] <= 20'b10001100011000110001;
		//disps[19:5] <= 15'b100001000010000;
		//disps[3:0] <= sw[3:0];
		//disps[4] <= 1'b0;
		end
		
		else if(current_state == UNLOCKED)
		begin
		disps <= {O, P, E, n};	//OPEn
		end
		
		else if(current_state == CHAGEFIRSTDIGIT)
		begin
		disps <= {100,0,sw[3:0],blank,blank,blank}
		end
		
		else if(current_state == CHANGESECONDDIGIT)
		begin
		disps <= {101,0,inpassword[15:12],0,sw[3:0],blank,blank}
		end
		
		else if(current_state == CHANGETHIRDDIGIT)
		begin
		disps <= {110,0,inpassword[15:12],0,inpassword[11:8],0,sw[3:0],blank}
		end
		
		else if(current_state == CHANGEFOURTHDIGIT)
		begin
		disps <= {111,0,inpassword[15:12],0,inpassword[11:8],0,inpassword[7:4],0,sw[3:0]}
		end
		
		end
		/*
		 You need more else if obviously

		*/
	end


endmodule
